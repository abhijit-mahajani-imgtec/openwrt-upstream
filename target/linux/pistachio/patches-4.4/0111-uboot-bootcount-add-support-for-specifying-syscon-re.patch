From 345298db6d27023817dd02775a7097a1907b3604 Mon Sep 17 00:00:00 2001
From: Shraddha Chaudhari <Shraddha.Chaudhari@imgtec.com>
Date: Wed, 16 Mar 2016 18:19:27 +0530
Subject: uboot-bootcount: add support for specifying syscon reg

bootcount register on some platforms are implemented as syscon regmap,
add property to specify syscon node instead of reg.

Change existing resource implementation to use regmap as the code becomes
simpler, also changed long to int in few places as regmap likes int.

Change-Id: If0b62f9c00b41fe0e65921951841009852dad3a5
Signed-off-by: Shraddha Chaudhari <Shraddha.Chaudhari@imgtec.com>
---
 .../devicetree/bindings/misc/uboot-bootcount.txt   |  6 ++
 drivers/misc/uboot_bootcount.c                     | 68 ++++++++++++++++++----
 2 files changed, 62 insertions(+), 12 deletions(-)

diff --git a/Documentation/devicetree/bindings/misc/uboot-bootcount.txt b/Documentation/devicetree/bindings/misc/uboot-bootcount.txt
index 7ab1134..0037f24 100644
--- a/Documentation/devicetree/bindings/misc/uboot-bootcount.txt
+++ b/Documentation/devicetree/bindings/misc/uboot-bootcount.txt
@@ -25,6 +25,7 @@ Required properties:
 
   - compatible : should be "uboot,bootcount"
   - reg: the address of the bootcounter
+  - syscon-reg: Specify if reg property is not specified, should specify the syscon reg to be used
 
 Example:
 
@@ -32,3 +33,8 @@ bootcount@1c23000 {
 	compatible = "uboot,bootcount";
 	reg = <0x23060 0x1>;
 };
+
+bootcount {
+	compatible = "uboot,bootcount";
+	syscon-reg = <&scratchpad 0x0>;
+};
diff --git a/drivers/misc/uboot_bootcount.c b/drivers/misc/uboot_bootcount.c
index 684993a..eecdb4d 100644
--- a/drivers/misc/uboot_bootcount.c
+++ b/drivers/misc/uboot_bootcount.c
@@ -19,6 +19,8 @@
 #include <linux/slab.h>
 #include <linux/of_address.h>
 #include <linux/of_platform.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
 
 #define UBOOT_BOOTCOUNT_MAGIC		0xB001C041 /* magic number value */
 #define UBOOT_BOOTCOUNT_MAGIC_MASK	0xFFFF0000 /* magic, when combined */
@@ -26,23 +28,34 @@
 
 
 struct bootcount_device {
-	void __iomem *reg;
+	struct regmap *regmap;
+	unsigned int regmap_offset;
+};
+
+static const struct regmap_config regmap_config = {
+	.reg_bits = 32,
+	.val_bits = 32,
+	.reg_stride = 4,
 };
 
 static int bootcount_show(struct device *dev,
 				struct device_attribute *attr,
 				char *buf)
 {
-	unsigned long bootcount;
+	int ret;
+	unsigned int bootcount;
 	struct bootcount_device *priv = dev_get_drvdata(dev);
 
-	bootcount = readl(priv->reg);
+	ret = regmap_read(priv->regmap, priv->regmap_offset, &bootcount);
+	if (ret)
+		return ret;
+
 	if ((bootcount & UBOOT_BOOTCOUNT_MAGIC_MASK) !=
 		(UBOOT_BOOTCOUNT_MAGIC & UBOOT_BOOTCOUNT_MAGIC_MASK)) {
 		return -EINVAL;
 	}
 	bootcount &= UBOOT_BOOTCOUNT_COUNT_MASK;
-	return sprintf(buf, "%lu\n", bootcount);
+	return sprintf(buf, "%u\n", bootcount);
 }
 
 static int bootcount_store(struct device *dev,
@@ -60,7 +73,9 @@ static int bootcount_store(struct device *dev,
 
 	value = (UBOOT_BOOTCOUNT_MAGIC & UBOOT_BOOTCOUNT_MAGIC_MASK) |
 		(value & UBOOT_BOOTCOUNT_COUNT_MASK);
-	writel(value, priv->reg);
+	ret = regmap_write(priv->regmap, priv->regmap_offset, value);
+	if (ret)
+		return ret;
 
 	return count;
 }
@@ -69,10 +84,10 @@ static DEVICE_ATTR_RW(bootcount);
 
 static int bootcount_probe(struct platform_device *ofdev)
 {
-	unsigned long magic;
+	unsigned int magic;
 	struct bootcount_device *priv;
 	struct resource *res;
-	int status;
+	int status, ret;
 
 	priv = devm_kzalloc(&ofdev->dev, sizeof(struct bootcount_device), GFP_KERNEL);
 	if (!priv) {
@@ -81,13 +96,42 @@ static int bootcount_probe(struct platform_device *ofdev)
 	}
 
 	res = platform_get_resource(ofdev, IORESOURCE_MEM, 0);
-	priv->reg = devm_ioremap_resource(&ofdev->dev, res);
-	 if (IS_ERR(priv->reg)) {
-		dev_err(&ofdev->dev, "unable to map register\n");
-		return PTR_ERR(priv->reg);
+	if (res) {
+		void __iomem *reg;
+
+		reg = devm_ioremap_resource(&ofdev->dev, res);
+		if (IS_ERR(reg)) {
+			dev_err(&ofdev->dev, "Unable to map register\n");
+			return PTR_ERR(reg);
+		}
+		priv->regmap = devm_regmap_init_mmio(&ofdev->dev, reg,
+						     &regmap_config);
+		if (IS_ERR(priv->regmap)) {
+			dev_err(&ofdev->dev, "Unable to get regmap\n");
+			return PTR_ERR(priv->regmap);
+		}
+
+		priv->regmap_offset = 0;
+	} else {
+		struct of_phandle_args args;
+
+		ret = of_parse_phandle_with_fixed_args(ofdev->dev.of_node,
+						"syscon-reg", 1, 0,
+						&args);
+		if (ret)
+			return ret;
+		priv->regmap = syscon_node_to_regmap(args.np);
+		if (IS_ERR(priv->regmap)) {
+			dev_err(&ofdev->dev, "Unable to get regmap\n");
+			return PTR_ERR(priv->regmap);
+		}
+		priv->regmap_offset = args.args[0];
 	}
 
-	magic = readl(priv->reg);
+	ret = regmap_read(priv->regmap, priv->regmap_offset, &magic);
+	if (ret)
+		return ret;
+
 	if ((magic & UBOOT_BOOTCOUNT_MAGIC_MASK) !=
 	    (UBOOT_BOOTCOUNT_MAGIC & UBOOT_BOOTCOUNT_MAGIC_MASK)) {
 		dev_err(&ofdev->dev, "bad magic\n");
-- 
2.6.2

