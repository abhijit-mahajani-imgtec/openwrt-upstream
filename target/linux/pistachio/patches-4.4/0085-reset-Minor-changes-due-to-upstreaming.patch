From 3f39ef08b261e8fe4e3f5b733bcc80995c44e276 Mon Sep 17 00:00:00 2001
From: James Hartley <james.hartley@imgtec.com>
Date: Mon, 29 Feb 2016 15:13:31 +0000
Subject: reset: Minor changes due to upstreaming

This is now upstreamed, so this patch brings the reset driver
in line with what was accepted upstream.

Change-Id: Ieeaf3bf7a239e2bddcf9d22b0f6e34576f19d4be
Signed-off-by: James Hartley <james.hartley@imgtec.com>
---
 .../bindings/reset/img,pistachio-reset.txt         | 19 +++++++-----
 drivers/reset/reset-pistachio.c                    | 34 ++++++++------------
 .../reset-controller/pistachio-resets.h            | 36 ----------------------
 include/dt-bindings/reset/pistachio-resets.h       | 36 ++++++++++++++++++++++
 4 files changed, 60 insertions(+), 65 deletions(-)
 mode change 100644 => 100755 drivers/reset/reset-pistachio.c
 delete mode 100644 include/dt-bindings/reset-controller/pistachio-resets.h
 create mode 100644 include/dt-bindings/reset/pistachio-resets.h

diff --git a/Documentation/devicetree/bindings/reset/img,pistachio-reset.txt b/Documentation/devicetree/bindings/reset/img,pistachio-reset.txt
index 12558d2..2872fbe 100644
--- a/Documentation/devicetree/bindings/reset/img,pistachio-reset.txt
+++ b/Documentation/devicetree/bindings/reset/img,pistachio-reset.txt
@@ -17,17 +17,20 @@ Required properties:
 
 - compatible: Contains "img,pistachio-reset"
 
-- img,cr-periph: Contains a phandle to the peripheral control syscon
-                    node which contains the soft reset register
-
 - #reset-cells: Contains 1
 
 Example:
-
-	pistachio_reset: reset-controller {
-		compatible = "img,pistachio-reset";
-		img,cr-periph = <&cr_periph>;
-		#reset-cells = <1>;
+	cr_periph: clk@18148000 {
+		compatible = "img,pistachio-cr-periph", "syscon", "simple-bus";
+		reg = <0x18148000 0x1000>;
+		clocks = <&clk_periph PERIPH_CLK_SYS>;
+		clock-names = "sys";
+		#clock-cells = <1>;
+
+		pistachio_reset: reset-controller {
+			compatible = "img,pistachio-reset";
+			#reset-cells = <1>;
+		};
 	};
 
 Specifying reset control of devices
diff --git a/drivers/reset/reset-pistachio.c b/drivers/reset/reset-pistachio.c
old mode 100644
new mode 100755
index 039ecb0..059e385
--- a/drivers/reset/reset-pistachio.c
+++ b/drivers/reset/reset-pistachio.c
@@ -18,7 +18,7 @@
 #include <linux/slab.h>
 #include <linux/mfd/syscon.h>
 
-#include <dt-bindings/reset-controller/pistachio-resets.h>
+#include <dt-bindings/reset/pistachio-resets.h>
 
 #define	PISTACHIO_SOFT_RESET		0
 
@@ -59,12 +59,12 @@ static inline int pistachio_reset_shift(unsigned long id)
 	case PISTACHIO_RESET_USB_PHY_PON:
 		return id + 7;
 	default:
-		return -1;
+		return -EINVAL;
 	}
 }
 
 static int pistachio_reset_assert(struct reset_controller_dev *rcdev,
-			      unsigned long id)
+				  unsigned long id)
 {
 	struct pistachio_reset_data *rd;
 	u32 mask;
@@ -74,15 +74,14 @@ static int pistachio_reset_assert(struct reset_controller_dev *rcdev,
 	shift = pistachio_reset_shift(id);
 	if (shift < 0)
 		return shift;
-	mask = 1UL << shift;
+	mask = BIT(shift);
 
-	regmap_update_bits(rd->periph_regs, PISTACHIO_SOFT_RESET, mask, mask);
-
-	return 0;
+	return regmap_update_bits(rd->periph_regs, PISTACHIO_SOFT_RESET,
+				  mask, mask);
 }
 
 static int pistachio_reset_deassert(struct reset_controller_dev *rcdev,
-				unsigned long id)
+				    unsigned long id)
 {
 	struct pistachio_reset_data *rd;
 	u32 mask;
@@ -92,11 +91,10 @@ static int pistachio_reset_deassert(struct reset_controller_dev *rcdev,
 	shift = pistachio_reset_shift(id);
 	if (shift < 0)
 		return shift;
-	mask = 1UL << shift;
+	mask = BIT(shift);
 
-	regmap_update_bits(rd->periph_regs, PISTACHIO_SOFT_RESET, mask, 0);
-
-	return 0;
+	return regmap_update_bits(rd->periph_regs, PISTACHIO_SOFT_RESET,
+				  mask, 0);
 }
 
 static struct reset_control_ops pistachio_reset_ops = {
@@ -107,7 +105,6 @@ static struct reset_control_ops pistachio_reset_ops = {
 static int pistachio_reset_probe(struct platform_device *pdev)
 {
 	struct pistachio_reset_data *rd;
-	int ret;
 	struct device *dev = &pdev->dev;
 	struct device_node *np = pdev->dev.of_node;
 
@@ -115,7 +112,7 @@ static int pistachio_reset_probe(struct platform_device *pdev)
 	if (!rd)
 		return -ENOMEM;
 
-	rd->periph_regs = syscon_regmap_lookup_by_phandle(np, "img,cr-periph");
+	rd->periph_regs = syscon_node_to_regmap(np->parent);
 	if (IS_ERR(rd->periph_regs))
 		return PTR_ERR(rd->periph_regs);
 
@@ -124,11 +121,7 @@ static int pistachio_reset_probe(struct platform_device *pdev)
 	rd->rcdev.ops = &pistachio_reset_ops;
 	rd->rcdev.of_node = np;
 
-	ret = reset_controller_register(&rd->rcdev);
-	if (ret)
-		return ret;
-
-	return 0;
+	return reset_controller_register(&rd->rcdev);
 }
 
 static int pistachio_reset_remove(struct platform_device *pdev)
@@ -140,7 +133,6 @@ static int pistachio_reset_remove(struct platform_device *pdev)
 	return 0;
 }
 
-
 static const struct of_device_id pistachio_reset_dt_ids[] = {
 	 { .compatible = "img,pistachio-reset", },
 	 { /* sentinel */ },
@@ -152,7 +144,7 @@ static struct platform_driver pistachio_reset_driver = {
 	.remove	= pistachio_reset_remove,
 	.driver = {
 		.name		= "pistachio-reset",
-		.of_match_table	= pistachio_reset_dt_ids,
+		.of_match_table	= of_match_ptr(pistachio_reset_dt_ids),
 	},
 };
 module_platform_driver(pistachio_reset_driver);
diff --git a/include/dt-bindings/reset-controller/pistachio-resets.h b/include/dt-bindings/reset-controller/pistachio-resets.h
deleted file mode 100644
index 60a189b..0000000
--- a/include/dt-bindings/reset-controller/pistachio-resets.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * This header provides constants for the reset controller
- * present in the Pistachio SoC
- */
-
-#ifndef _PISTACHIO_RESETS_H
-#define _PISTACHIO_RESETS_H
-
-#define PISTACHIO_RESET_I2C0		0
-#define PISTACHIO_RESET_I2C1		1
-#define PISTACHIO_RESET_I2C2		2
-#define PISTACHIO_RESET_I2C3		3
-#define PISTACHIO_RESET_I2S_IN		4
-#define PISTACHIO_RESET_PRL_OUT		5
-#define PISTACHIO_RESET_SPDIF_OUT	6
-#define PISTACHIO_RESET_SPI		7
-#define PISTACHIO_RESET_PWM_PDM		8
-#define PISTACHIO_RESET_UART0		9
-#define PISTACHIO_RESET_UART1		10
-#define PISTACHIO_RESET_QSPI		11
-#define PISTACHIO_RESET_MDC		12
-#define PISTACHIO_RESET_SDHOST		13
-#define PISTACHIO_RESET_ETHERNET	14
-#define PISTACHIO_RESET_IR		15
-#define PISTACHIO_RESET_HASH		16
-#define PISTACHIO_RESET_TIMER		17
-#define PISTACHIO_RESET_I2S_OUT		18
-#define PISTACHIO_RESET_SPDIF_IN	19
-#define PISTACHIO_RESET_EVT		20
-#define PISTACHIO_RESET_USB_H		21
-#define PISTACHIO_RESET_USB_PR		22
-#define PISTACHIO_RESET_USB_PHY_PR	23
-#define PISTACHIO_RESET_USB_PHY_PON	24
-#define PISTACHIO_RESET_MAX		24
-
-#endif
diff --git a/include/dt-bindings/reset/pistachio-resets.h b/include/dt-bindings/reset/pistachio-resets.h
new file mode 100644
index 0000000..60a189b
--- /dev/null
+++ b/include/dt-bindings/reset/pistachio-resets.h
@@ -0,0 +1,36 @@
+/*
+ * This header provides constants for the reset controller
+ * present in the Pistachio SoC
+ */
+
+#ifndef _PISTACHIO_RESETS_H
+#define _PISTACHIO_RESETS_H
+
+#define PISTACHIO_RESET_I2C0		0
+#define PISTACHIO_RESET_I2C1		1
+#define PISTACHIO_RESET_I2C2		2
+#define PISTACHIO_RESET_I2C3		3
+#define PISTACHIO_RESET_I2S_IN		4
+#define PISTACHIO_RESET_PRL_OUT		5
+#define PISTACHIO_RESET_SPDIF_OUT	6
+#define PISTACHIO_RESET_SPI		7
+#define PISTACHIO_RESET_PWM_PDM		8
+#define PISTACHIO_RESET_UART0		9
+#define PISTACHIO_RESET_UART1		10
+#define PISTACHIO_RESET_QSPI		11
+#define PISTACHIO_RESET_MDC		12
+#define PISTACHIO_RESET_SDHOST		13
+#define PISTACHIO_RESET_ETHERNET	14
+#define PISTACHIO_RESET_IR		15
+#define PISTACHIO_RESET_HASH		16
+#define PISTACHIO_RESET_TIMER		17
+#define PISTACHIO_RESET_I2S_OUT		18
+#define PISTACHIO_RESET_SPDIF_IN	19
+#define PISTACHIO_RESET_EVT		20
+#define PISTACHIO_RESET_USB_H		21
+#define PISTACHIO_RESET_USB_PR		22
+#define PISTACHIO_RESET_USB_PHY_PR	23
+#define PISTACHIO_RESET_USB_PHY_PON	24
+#define PISTACHIO_RESET_MAX		24
+
+#endif
-- 
2.6.2

